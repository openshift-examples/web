---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: push-to-tree
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    # pipelinesascode.tekton.dev/on-event: "[pull_request]"
    pipelinesascode.tekton.dev/on-event: "[push]"
    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[main,devel]"
    pipelinesascode.tekton.dev/on-cel-expression: |
            event == "push"
            && ( target_branch == "main" || target_branch == "devel" )
            && ! "deploy/*".pathChanged()
    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    pipelinesascode.tekton.dev/task: "git-clone"

    # Use maven task from hub
    # pipelinesascode.tekton.dev/task-1: "[pre-commit]"

    # You can add more tasks in here to reuse, browse the one you like from here
    # https://hub.tekton.dev/
    # example:
    pipelinesascode.tekton.dev/task-1: "[buildah]"
    # pipelinesascode.tekton.dev/task-2: "[.tekton/task/github-add-labels.yaml]"
    # pipelinesascode.tekton.dev/task-3: "[.tekton/task/github-add-comment.yaml]"

    # How many runs we want to keep attached to this event
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: "{{ clone_url }}"
    - name: revision
      value: "{{ revision }}"
    # - name: pull_request_number
    #   value: "{{ pull_request_number }}"
    # - name: git_auth_secret
    #   value: "{{ git_auth_secret }}"
    - name: source_branch
      value: '{{ source_branch }}'
  podTemplate:
    nodeSelector:
      kubernetes.io/arch: amd64
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
      - name: source_branch
      # - name: pull_request_number
      # - name: git_auth_secret
    workspaces:
      - name: source
      - name: basic-auth
      - name: deploy-key
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
          kind: ClusterTask
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
          - name: ssh-directory
            workspace: deploy-key
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
          - name: depth
            value: 0
      - name: tag
        params:
          - name: source_branch
            value: $(params.source_branch)
        taskSpec:
          results:
            - name: name
              descripte: Clean tag based on source_branch
          steps:
            - name: transform-tag
              image: registry.access.redhat.com/ubi9/ubi-micro:latest
              script: |
                set -x
                SOURCE_BRANCH="$(params.source_branch)"
                echo -n ${SOURCE_BRANCH#refs/tags/} | tee $(results.name.path)

      - name: build-builder-image
        params:
          - name: IMAGE
            value: quay.io/openshift-examples/builder:$(tasks.tag.results.name)
          - name: DOCKERFILE
            value: ./builder.Containerfile
        runAfter:
          - fetch-repository
          - tag
        taskRef:
          kind: ClusterTask
          name: buildah
        workspaces:
          - name: source
            workspace: source
          - name: dockerconfig
            workspace: quay-push-bot

      - name: build-web-image
        params:
          - name: IMAGE
            value: 'quay.io/openshift-examples/web:$(tasks.tag.results.name)'
          - name: DOCKERFILE
            value: ./Containerfile
          - name: BUILD_EXTRA_ARGS
            value: "--build-arg BUILDER_IMAGE=quay.io/openshift-examples/builder:$(tasks.tag.results.name)"
          # https://access.redhat.com/solutions/6843481
          - name: PUSH_EXTRA_ARGS
            value: "--format v2s2"
        runAfter:
          - build-builder-image
        taskRef:
          kind: ClusterTask
          name: buildah
        workspaces:
          - name: source
            workspace: source
          - name: dockerconfig
            workspace: quay-push-bot

      - name: update-stage
        runAfter:
          - build-web-image
        workspaces:
          - name: source
            workspace: source
          - name: ssh-directory
            workspace: deploy-key
        params:
          - name: IMAGE_DIGEST
            value: $(tasks.build-web-image.results.IMAGE_DIGEST)
          - name: IMAGE_URL
            value: $(tasks.build-web-image.results.IMAGE_URL)
          - name: TAG_NAME
            value: $(tasks.tag.results.name)
        taskSpec:
          workspaces:
            - name: source
            - name: ssh-directory
          params:
            - default: /home/git
              description: |
                Absolute path to the user's home directory.
              name: userHome
              type: string
            - name: TAG_NAME
          steps:
            - name: debug
              env:
                - name: WORKSPACE_SSH_DIRECTORY_BOUND
                  value: $(workspaces.ssh-directory.bound)
                - name: WORKSPACE_SSH_DIRECTORY_PATH
                  value: $(workspaces.ssh-directory.path)
                - name: PARAM_USER_HOME
                  value: $(params.userHome)
                - name: WORKSPACE_OUTPUT_PATH
                  value: $(workspaces.source.path)
                - name: IMAGE_DIGEST
                  value: $(params.IMAGE_DIGEST)
                - name: TAG_NAME
                  value: $(params.TAG_NAME)

              image: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:1a50511583fc02a27012d17d942e247813404104ddd282d7e26f99765174392c
              workingDir: $(workspaces.source.path)
              script: |
                set -euxo pipefail

                if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                  chmod 700 "${PARAM_USER_HOME}"/.ssh
                  chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
                fi

                git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"

                git config --global user.email "rbohne+skull-cicd@redhat.com"
                git config --global user.name "OpenShift Pipeline as Code (Tekton)"

                sed "s/  tag:.*/  tag: $IMAGE_DIGEST/" -i deploy/${TAG_NAME}.value.yaml

                git add deploy/${TAG_NAME}.value.yaml

                git commit --allow-empty -m "[OpenShift Pipeline as Code] Update ${TAG_NAME} deployment to $IMAGE_DIGEST"
                git push -v origin HEAD:${TAG_NAME}

  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    # This workspace will inject secret to help the git-clone task to be able to
    # checkout the private repositories
    - name: basic-auth
      secret:
        secretName: "{{ git_auth_secret }}"
    - name: quay-push-bot
      secret:
        secretName: quay-push-bot
    - name: deploy-key
      secret:
        secretName: web-deploy-key
