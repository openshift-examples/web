---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: check-and-test-deployment
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "[pull_request]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[main]"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    pipelinesascode.tekton.dev/task: "git-clone"

    # Use maven task from hub
    # pipelinesascode.tekton.dev/task-1: "[pre-commit]"

    # You can add more tasks in here to reuse, browse the one you like from here
    # https://hub.tekton.dev/
    # example:
    # pipelinesascode.tekton.dev/task-2: "[github-add-labels]"
    pipelinesascode.tekton.dev/task-2: "[.tekton/task/github-add-labels.yaml]"
    pipelinesascode.tekton.dev/task-3: "[.tekton/task/github-add-comment.yaml]"

    # How many runs we want to keep attached to this event
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
    - name: pull_request_number
      value: "{{ pull_request_number }}"
    - name: git_auth_secret
      value: "{{ git_auth_secret }}"
    - name: source_branch
      value: "{{source_branch}}"
    - name: target_branch
      value: "{{target_branch}}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
      - name: pull_request_number
      - name: git_auth_secret
    workspaces:
      - name: source
      - name: basic-auth
    tasks:
      - name: fetch-repository-pr
        taskRef:
          name: git-clone
          kind: ClusterTask
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
          - name: depth
            value: 0
          - name: subdirectory
            value: pr
      - name: fetch-repository-main
        taskRef:
          name: git-clone
          kind: ClusterTask
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: main
          - name: subdirectory
            value: main
          # - name: depth
          #   value: 1
      # Customize this task if you like, or just do a taskRef
      # to one of the hub task.
      - name: pre-commit
        runAfter:
          - fetch-repository-pr
          - fetch-repository-main
        workspaces:
          - name: source
            workspace: source
        params:
          - name: main_commit
            value: $(tasks.fetch-repository-main.results.commit)
          - name: pr_commit
            value: $(tasks.fetch-repository-pr.results.commit)
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: pre-commit
              image: quay.io/openshift-examples/builder:devel
              workingDir: $(workspaces.source.path)/pr
              script: |
                set -euxo pipefail

                echo -e ' ðŸ’€ There was an error during pre-commit / linter:\n\n```' \
                  > $(workspaces.source.path)/notify-linter-on-failure.txt

                pre-commit run --color=never \
                  --from-ref $(params.main_commit) \
                  --to-ref $(params.pr_commit) \
                | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g" \
                | tee -a $(workspaces.source.path)/notify-linter-on-failure.txt

                RC=$?
                echo "Return code $RC"

                echo -e '\n```\n' \
                  > $(workspaces.source.path)/notify-linter-on-failure.txt

                exit $?

      - name: github-add-labels
        runAfter:
          - pre-commit
        taskRef:
          name: github-add-labels
        params:
          - name: REQUEST_URL
            value: "$(params.repo_url)/pull/$(params.pull_request_number)"
          - name: LABELS
            value:
              - ok-for-test-deployment
          - name: PAC_GITHUB_SECRET
            value: "$(params.git_auth_secret)"

      - name: wait-for-imagestream
        params:
          - name: SCRIPT
            value: |
              while true; do
                oc get imagestream/pr-$(params.pull_request_number) && exit 0 ;
                sleep 5;
              done;
          - name: VERSION
            value: latest
        runAfter:
          - github-add-labels
        taskRef:
          kind: ClusterTask
          name: openshift-client

      - name: build-image
        params:
          - name: IMAGE
            value: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/pr-$(params.pull_request_number):latest
          - name: DOCKERFILE
            value: ./Containerfile
          - name: TLSVERIFY
            value: 'false'
          - name: CONTEXT
            value: 'pr/'
        runAfter:
          - wait-for-imagestream
        taskRef:
          kind: ClusterTask
          name: buildah
        workspaces:
          - name: source
            workspace: source

      - name: wait-for-route-and-notify
        runAfter:
          - build-image
        workspaces:
          - name: source
            workspace: source
        params:
          - name: pull_request_number
            value: "$(params.pull_request_number)"
        taskSpec:
          params:
            - name: pull_request_number
              type: string
          workspaces:
            - name: source
          steps:
            - name: pre-commit
              image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
              workingDir: $(workspaces.source.path)
              script: |
                #!/usr/bin/env bash
                set -euxo pipefail

                while true; do
                  oc get routes/pr-$(params.pull_request_number) && break ;
                  sleep 5;
                done;

                oc rollout status deployment/pr-$(params.pull_request_number)

                oc get routes/pr-$(params.pull_request_number) \
                  -o go-template='ðŸ’» Deployed & available at {{"\n"}}ðŸŒŽ https://{{ .spec.host}}{{"\n"}}' \
                  | tee $(workspaces.source.path)/notify-deployment.txt

      - name: notify-deployment
        runAfter:
          - wait-for-route-and-notify
        workspaces:
          - name: comment-file
            workspace: source
        params:
          - name: REQUEST_URL
            value: "$(params.repo_url)/pull/$(params.pull_request_number)"
          - name: PAC_GITHUB_SECRET
            value: "$(params.git_auth_secret)"
          - name: COMMENT_OR_FILE
            value: "notify-deployment.txt"
        taskRef:
          name: github-add-comment
    finally:
      - name: notify-linter-on-failure
        workspaces:
          - name: comment-file
            workspace: source
        when:
          - input: $(tasks.pre-commit.status)
            operator: in
            values: ["Failed"]
        params:
          - name: REQUEST_URL
            value: "$(params.repo_url)/pull/$(params.pull_request_number)"
          - name: PAC_GITHUB_SECRET
            value: "$(params.git_auth_secret)"
          - name: COMMENT_OR_FILE
            value: "notify-linter-on-failure.txt"
        taskRef:
          name: github-add-comment

  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    # This workspace will inject secret to help the git-clone task to be able to
    # checkout the private repositories
    - name: basic-auth
      secret:
        secretName: "{{ git_auth_secret }}"
